#!/bin/bash
#
# Daily User Log Archiver Project Script
# Goal: Log system data, rotate old logs, and schedule daily execution.
#

# --- 1. DIRECTORY AND VARIABLE SETUP ---

# Define the location for all logs and the archive folder
LOG_ROOT_DIR="$HOME/user_project_logs"
ARCHIVE_STORAGE="$LOG_ROOT_DIR/backup_archive"

# Set up the date format for the filename (Example: 2025-10-16)
DATE_STAMP=$(date +%Y-%m-%d)
LOG_FILE_NAME="log_$DATE_STAMP.txt"
CURRENT_LOG_PATH="$LOG_ROOT_DIR/$LOG_FILE_NAME"

# Logs older than this number of days will be moved (Hint: mtime +7)
CLEANUP_THRESHOLD_DAYS=7


# Check and create necessary directories
echo "Setting up directories: $LOG_ROOT_DIR and $ARCHIVE_STORAGE"
mkdir -p "$LOG_ROOT_DIR"
mkdir -p "$ARCHIVE_STORAGE"


# --- 2. DAILY SYSTEM LOGGING ---

echo "===================================================" > "$CURRENT_LOG_PATH"
echo "DAILY SYSTEM REPORT FOR: $(date)" >> "$CURRENT_LOG_PATH"
echo "Report generated by: $(whoami)" >> "$CURRENT_LOG_PATH"
echo "===================================================" >> "$CURRENT_LOG_PATH"

# Log System Uptime
echo -e "\n--- System Uptime and Load ---" >> "$CURRENT_LOG_PATH"
uptime >> "$CURRENT_LOG_PATH"

# Log Top Processes (Sorted by CPU usage, including the header)
echo -e "\n--- Top 5 CPU Processes (PID, CMD, %MEM, %CPU) ---" >> "$CURRENT_LOG_PATH"
ps -eo pid,comm,%mem,%cpu --sort=-%cpu | head -n 6 >> "$CURRENT_LOG_PATH"

# Log Disk Usage for the Filesystem
echo -e "\n--- Overall Filesystem Disk Usage (df -h) ---" >> "$CURRENT_LOG_PATH"
df -h >> "$CURRENT_LOG_PATH"

# Log disk usage specifically for our log directory
echo -e "\n--- Project Log Directory Size ---" >> "$CURRENT_LOG_PATH"
du -sh "$LOG_ROOT_DIR" >> "$CURRENT_LOG_PATH"

echo "Log generation complete. File: $LOG_FILE_NAME"


# --- 3. LOG ROTATION (CLEANUP) ---

echo -e "\n--- Running Cleanup: Moving logs older than $CLEANUP_THRESHOLD_DAYS days ---"
# We use find to locate the old files, then use a for loop to move them one by one.
# This explicitly shows the loop logic requested by the assignment.
OLD_LOGS=$(find "$LOG_ROOT_DIR" -maxdepth 1 -type f -name 'log_*.txt' -mtime +$CLEANUP_THRESHOLD_DAYS -not -name "$LOG_FILE_NAME")

if [ -z "$OLD_LOGS" ]; then
    echo "No old log files found for rotation."
else
    echo "Files detected and moving to $ARCHIVE_STORAGE:"
    # Use the explicit for loop structure as shown in the assignment hint
    for LOG_FILE in $OLD_LOGS; do
        mv "$LOG_FILE" "$ARCHIVE_STORAGE/"
        echo "  -> Moved $(basename "$LOG_FILE")"
    done
fi


# --- 4. WEEKLY ARCHIVING (TAR/GZ COMPRESSION) ---

# Check if today is Sunday (0) to run the weekly archive
if [ $(date +%w) -eq 0 ]; then
    echo -e "\n--- WEEKLY ARCHIVE RUNNING (Sunday) ---"

    # Name the archive based on the date of the previous day/week
    ARCHIVE_NAME="weekly_archive_$(date --date='yesterday' +%Y%m%d).tar.gz"

    # Compress all individual log files currently in the ARCHIVE_STORAGE folder
    # We move them here in step 3, so now we compress them.
    echo "Compressing logs in $ARCHIVE_STORAGE..."
    
    # Create the archive and remove the source files in one tar command
    tar -C "$ARCHIVE_STORAGE" -czf "$ARCHIVE_STORAGE/$ARCHIVE_NAME" --remove-files log_*.txt

    echo "Successfully created $ARCHIVE_NAME."
fi

# End of script
echo -e "\nScript finished."

